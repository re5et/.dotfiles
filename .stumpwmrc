;; ;; -*-Lisp-*-

(in-package :stumpwm)

(setq *shell-program* (stumpwm::getenv "SHELL"))

(stumpwm:set-prefix-key (stumpwm:kbd "C-h"))

(setf
 *mouse-focus-policy* :ignore
 *message-window-gravity* :top-left
 *input-window-gravity* :bottom-left
 *mode-line-timeout* 1
 *mode-line-pad-y* 0
 *mode-line-background-color* "black"
 *mode-line-foreground-color* "gray20"
 *mode-line-border-color* "gray20"
 *screen-mode-line-format* (list
                            '(:eval (run-shell-command "~/bin/modeline" t))
                            "  %W"
                            ))

(set-focus-color "black")

;; emacs style splitting
(define-key *root-map* (kbd "0") "remove")
(define-key *root-map* (kbd "1") "only")
(define-key *root-map* (kbd "2") "vsplit")
(define-key *root-map* (kbd "3") "hsplit")

(define-key *root-map* (kbd "C-B") "prev-in-frame")
(define-key *root-map* (kbd "C-F") "next-in-frame")

(define-key *root-map* (kbd "i") "status")
(define-key *root-map* (kbd "B") "banish-window")
(define-key *root-map* (kbd "S-Left") "move-window left")
(define-key *root-map* (kbd "S-Right") "move-window right")
(define-key *root-map* (kbd "S-Up") "move-window up")
(define-key *root-map* (kbd "S-Down") "move-window down")
(define-key *root-map* (kbd "!") "exec dmenu_run -i -b -nb '#000' -nf '#0F0' -sb '#111' -sf '#F0F' -fn '-*-helvetica-bold-r-*-*-20-*-*-*-*-*-*-*'")

;; top level commands
(define-key *top-map* (kbd "C-S-RET") "fullscreen")
(define-key *top-map* (kbd "C-M-RET") "exec xscreensaver-command -lock")
(define-key *top-map* (kbd "C-:") "pull-hidden-next")
(define-key *top-map* (kbd "C-\"") "pull-hidden-previous")
(define-key *top-map* (kbd "C-;") "next")
(define-key *top-map* (kbd "C-'") "prev")
(define-key *top-map* (kbd "C-M-;") "colon")

;; volume control
(defcommand volume-up () ()
            (message (run-shell-command "amixer -c 0 set Master 4dB+" t)))
(defcommand volume-down () ()
            (message (run-shell-command "amixer -c 0 set Master 4dB-" t)))
(defcommand toggle-microphone-mute () ()
            (message (run-shell-command "amixer set Capture toggle" t)))
(define-key *top-map* (kbd "C-Up") "volume-up")
(define-key *top-map* (kbd "C-Down") "volume-down")
(define-key *root-map* (kbd "m") "toggle-microphone-mute")

;; mpc stuff
(define-key *root-map* (kbd "C-p") "exec emacsclient -e '(emms-pause)'")

;; get around groups easier
(define-key *top-map* (kbd "C-1") "gselect Default")
(define-key *top-map* (kbd "C-2") "gselect background")

(defcommand firefox () ()
            "Start Firefox or switch to it, if it is already running."
            (run-or-raise "killall firefox; firefox" '(:class "Firefox")))
(define-key *root-map* (kbd "f") "firefox")

(defcommand chromium () ()
            "Start Chromium or switch to it, if it is already running."
            (run-or-raise "chromium-browser" '(:title "chromium-browser")))
(define-key *root-map* (kbd "c") "chromium")

(defcommand emacs () ()
            "Start emacs or switch to it, if it is already running."
            (run-or-raise
             "ps aux | grep 'emacs --daemon' | grep -v grep; [[ $? == 0 ]] || emacs --daemon; emacsclient -c"
             '(:title "emacs-primary")))
(define-key *root-map* (kbd "e") "emacs")

(defcommand emux () ()
            "Start emux or switch to it, if it is already running."
            (run-or-raise "emacsclient -e '(start-emux)'" '(:title "emux")))
(define-key *root-map* (kbd "s") "emux")

(defcommand xbmc () ()
            "Start xbmc or switch to it, if it is already running."
            (run-or-raise "xbmc.bin" '(:class "xbmc.bin")))
(define-key *root-map* (kbd "x") "xbmc")

(defcommand spotify () ()
            "Start xbmc or switch to it, if it is already running."
            (run-or-raise "spotify" '(:class "spotify")))
(define-key *root-map* (kbd "M") "spotify")

(defcommand sakura () ()
            "Start sakura or switch to it, if it is already running."
            (run-or-raise "sakura" '(:class "Sakura")))
(define-key *root-map* (kbd "t") "sakura")

(defcommand banish-window () ()
            (run-commands "gmove background"))

(defcommand status () ()
            (message (run-shell-command "system-status" t)))

(defcommand kodi-pause-play () ()
            (message (run-shell-command "kodi-pause-play" t)))
(define-key *root-map* (kbd "p") "kodi-pause-play")

;; make my default groups
(run-commands
 "gnew background"
 "gselect Default")

(run-shell-command "unity-settings-daemon")
(run-shell-command "killall gnome-screensaver; xscreensaver")
(run-shell-command "synergys -c ~/.synergy.conf")
(firefox)
(emacs)
(emux)
